package com.codelabs.surajmini;

import android.Manifest;
import android.content.Context;
import android.content.DialogInterface;
import android.content.Intent;
import android.content.pm.PackageManager;
import android.location.Location;
import android.location.LocationManager;
import android.os.AsyncTask;
import android.support.v4.app.ActivityCompat;
import android.support.v4.app.FragmentActivity;
import android.os.Bundle;
import android.support.v7.app.AlertDialog;
import android.util.Log;
import android.view.View;
import android.widget.Button;
import android.widget.Toast;

import com.google.android.gms.maps.CameraUpdateFactory;
import com.google.android.gms.maps.GoogleMap;
import com.google.android.gms.maps.OnMapReadyCallback;
import com.google.android.gms.maps.SupportMapFragment;
import com.google.android.gms.maps.model.LatLng;
import com.google.android.gms.maps.model.MarkerOptions;

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.OutputStreamWriter;
import java.net.Socket;
import java.util.ArrayList;
import java.util.List;

public class MapsActivity extends FragmentActivity implements OnMapReadyCallback {

    private static final int MY_PERMISSIONS_REQUEST_READ_CONTACTS = -1;
    private GoogleMap mMap;
    Button location;
    String[] response = new String[50];
    List<Marker> markerList;
    LocationManager locationManager;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_maps);

        SupportMapFragment mapFragment = (SupportMapFragment) getSupportFragmentManager()
                .findFragmentById(R.id.map);
        mapFragment.getMapAsync(this);
        
        location = (Button) findViewById(R.id.location);
        location.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                getLocation();
            }
        });
    }

    private void getLocation() {

        if (ActivityCompat.checkSelfPermission(
                this, android.Manifest.permission.ACCESS_FINE_LOCATION) != PackageManager.PERMISSION_GRANTED &&
                ActivityCompat.checkSelfPermission(
                        this, android.Manifest.permission.ACCESS_COARSE_LOCATION) != PackageManager.PERMISSION_GRANTED) {

            ActivityCompat.requestPermissions(this,
                    new String[]{Manifest.permission.ACCESS_FINE_LOCATION, Manifest.permission.ACCESS_COARSE_LOCATION},
                    MY_PERMISSIONS_REQUEST_READ_CONTACTS);

        }else{
            Toast.makeText(MapsActivity.this, "Permission not granted!", Toast.LENGTH_SHORT).show();
            //return;
        }

        locationManager = (LocationManager) MapsActivity.this.getSystemService(Context.LOCATION_SERVICE);
        boolean enabled = locationManager.isProviderEnabled(LocationManager.GPS_PROVIDER);

        AlertDialog dialog = new AlertDialog.Builder(MapsActivity.this).
                setTitle("GPS Off").
                setMessage("Please enable gps.").
                setPositiveButton(android.R.string.ok, new DialogInterface.OnClickListener() {
                    @Override
                    public void onClick(DialogInterface dialog, int which) {
                        Intent intent = new Intent();
                        intent.setAction(android.provider.Settings.ACTION_LOCATION_SOURCE_SETTINGS);
                        startActivity(intent);
                    }
                }).create();

        if (enabled == false)
            dialog.show();


        Location location = locationManager.getLastKnownLocation(LocationManager.NETWORK_PROVIDER);
        if (location != null) {
            Log.e("TAG", "GPS is on");
            double latitude = location.getLatitude();
            double longitude = location.getLongitude();
            System.out.println(latitude + "," + longitude);
            LatLng curPosition = new LatLng(latitude, longitude);
            mMap.addMarker(new MarkerOptions().position(curPosition).title("My Location"));
            mMap.moveCamera(CameraUpdateFactory.newLatLng(curPosition));
            Toast.makeText(MapsActivity.this, "Location: " + latitude + "," + longitude, Toast.LENGTH_SHORT).show();
        } else
            Toast.makeText(MapsActivity.this, "Location not found", Toast.LENGTH_SHORT).show();
    }

    @Override
    public void onMapReady(GoogleMap googleMap) {
        mMap = googleMap;

        getLocation();
        new SetMarkers().execute();

        mMap.setOnMarkerClickListener(new GoogleMap.OnMarkerClickListener() {
            @Override
            public boolean onMarkerClick(com.google.android.gms.maps.model.Marker marker) {
                String name = marker.getTitle();
                for(Marker mark : markerList){
                    if(mark.getName().equals(name)){
                        //open dialog to show data.
                    }
                }
                return false;
            }
        });
    }


    private class SetMarkers extends AsyncTask<String, String, String>{

        String result;
        Socket socket;
        int i = 0;

        @Override
        protected String doInBackground(String... params) {
            result = "RETRIEVE\n";
            try {
                socket = new Socket("10.50.3.100", 8002);
                if(socket != null){
                    BufferedWriter out = new BufferedWriter(new OutputStreamWriter(socket.getOutputStream()));
                    BufferedReader in = new BufferedReader(new InputStreamReader(socket.getInputStream()));

                    out.write(result);
                    out.flush();

                    i = 0;
                    while((result = in.readLine()) != null){
                        response[i++] = result;
                    }
                }
            } catch (IOException e) {
                e.printStackTrace();
            }finally{
                try {
                    if(socket != null)
                        socket.close();
                } catch (IOException e) {
                    e.printStackTrace();
                }
            }
            return null;
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);
            markerList = new ArrayList<>();
            LatLng position;

            for(String data : response) {
                if (data != null) {
                    Marker mark = new Marker();
                    Log.d("Response", data);
                    String[] tokens = data.split(",");

                    mark.setName(tokens[0]);
                    mark.setAddress(tokens[1]);
                    mark.setNumber(tokens[2]);
                    mark.setMail(tokens[3]);
                    position = new LatLng(Double.parseDouble(tokens[4]), Double.parseDouble(tokens[5]));

                    mMap.addMarker(new MarkerOptions().position(position).title(tokens[0]));
                    markerList.add(mark);
                }
            }
        }
    }
}
